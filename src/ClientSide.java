import java.net.Socket;
import java.io.DataInputStream;
import java.io.DataOutputStream;

/**
 * @author Chriscel
 */
public class ClientSide extends javax.swing.JFrame {

    /* Initialize Components */
    static Socket socket;
    static DataInputStream inputStream;
    static DataOutputStream outputStream;
    
    /* Creates new form ClientSide */
    public ClientSide() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label_client = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        client_messages = new javax.swing.JTextArea();
        txt_client_message = new javax.swing.JTextField();
        btn_send_to_server = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        label_client.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        label_client.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_client.setText("CLIENT");

        client_messages.setColumns(20);
        client_messages.setRows(5);
        jScrollPane1.setViewportView(client_messages);

        btn_send_to_server.setText("Send to Server");
        btn_send_to_server.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_send_to_serverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label_client, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txt_client_message, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_send_to_server, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label_client)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_client_message)
                    .addComponent(btn_send_to_server, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* Button Send to Server Handler */
    private void btn_send_to_serverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_send_to_serverActionPerformed
        try {
            String outgoingMessage = "";
            outgoingMessage = txt_client_message.getText().trim();
            outputStream.writeUTF(outgoingMessage);
            client_messages.setText(client_messages.getText().trim()+"\nYou : " + outgoingMessage);
            txt_client_message.setText("");
        } catch (Exception e) {
            System.err.println("Send Message to Server Failed");
        }
    }//GEN-LAST:event_btn_send_to_serverActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientSide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientSide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientSide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientSide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientSide().setVisible(true);
            }
        });
      
        // Incoming Message Initialize
        String incomingMessage = "";
        
        /* Messaging */
        try {
            socket = new Socket("127.0.0.1", 8888);
            inputStream = new DataInputStream(socket.getInputStream());
            outputStream = new DataOutputStream(socket.getOutputStream());
        
            while (!incomingMessage.equals("Exit")) {
                incomingMessage = inputStream.readUTF();
                client_messages.setText(client_messages.getText().trim()+"\nServer : " + incomingMessage);
            }
        } catch (Exception e) {   
            client_messages.setText("Server is offline...");
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_send_to_server;
    private static javax.swing.JTextArea client_messages;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label_client;
    private javax.swing.JTextField txt_client_message;
    // End of variables declaration//GEN-END:variables
}
